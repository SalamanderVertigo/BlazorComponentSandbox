<div id="card-header-template-container">
    @{
            switch(Type)
            {
                case CardHeaderTemplateType.Standard:
                /*This will be a simple text header*/
                    <div class="card-header-standard">@StandardHeader</div>
                    break;
                case CardHeaderTemplateType.Avatar:
                @* display will be in line and left will be avatar, right will be some button thing*@
                    <div class="card-header-avatar">
                        <div class="card-header-avatar-left">
                            <p>(Name...)</p>
                        </div>
                        <div class="card-header-avatar-right">
                            @{
                                if (Avatar is not null)
                                {
                                    @Avatar
                                }
                            }
                        </div>
                    </div>
                    break;
                case CardHeaderTemplateType.Custom:
                /* whatever child content the developer decides to render*/
                    <div class="card-header-custom">@CustomerHeader</div>
                    break;
                default:
                    <div class="card-header-default"><p>Default</p></div>
                    break;
            }
        }
</div>

@code {

    [Parameter] public CardHeaderTemplateType Type { get; set; } = CardHeaderTemplateType.Standard;
    [Parameter] public string? Name { get; set; }
    [Parameter] public RenderFragment<CardHeader>? AvatarHeader { get; set; }
    [Parameter] public RenderFragment<CardHeader>? StandardHeader { get; set; }
    [Parameter] public RenderFragment<CardHeader>? CustomerHeader { get; set; }
    [Parameter] public RenderFragment<Avatar>? Avatar { get; set; }
}